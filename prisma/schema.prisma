generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    user
    assistant
}

enum Type {
    result
    error
}

enum Model {
    imi1
    imi1c
    imi2
    imi3
    imi4
}

model User {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    fullname      String
    email         String
    developerSlug String? @unique

    apps     App[]
    websites Website[]
    messages Message[]
    chats    Chat[]
}

model App {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title        String
    description  String
    logo         String
    developerId  String
    releaseNotes String?
    downloadLink String?
    screenshots  String[]
    developer    User     @relation(fields: [developerId], references: [id], onDelete: Cascade)
}

model Website {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title         String
    description   String
    featuredImage String
    developerId   String
    url           String
    developer     User   @relation(fields: [developerId], references: [id], onDelete: Cascade)
}

model Message {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId  String
    chatId  String
    role    Role
    type    Type
    model   Model
    content String

    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    chatSession Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    slug   String?

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages Message[]
}

model Task {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())

    chatId String @unique
    userId String @unique
    status String
}
