generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    user
    assistant
}

enum Type {
    result
    error
}

enum Model {
    imi1
    imi1c
    imi2
    imi2c
    imi3
    imi4
    imioss
    imiossc
}

enum Status {
    generating
    generated
}

model User {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    fullname      String
    email         String
    developerSlug String? @unique

    apps               App[]
    websites           Website[]
    messages           Message[]
    chats              Chat[]
    communityPosts     CommunityPost[]
    communityPostLikes CommunityPostLike[]
}

model App {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title        String
    description  String
    logo         String
    userId       String
    releaseNotes String?
    downloadLink String?
    screenshots  String[]
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Website {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    slug          String
    code          String
    public        Boolean @default(false)
    featuredImage String?
    userId        String
    prompt        String
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId  String
    chatId  String
    role    Role
    type    Type
    model   Model
    content String

    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    chatSession Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    slug   String?

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages Message[]
}

model Task {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())

    chatId String @unique
    userId String @unique
    status String
}

model PostTask {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())

    userId String
    status Status
}

model CommunityPost {
    id        String   @id @unique @default(uuid())
    createdAt DateTime @default(now())

    imageUrl String
    userId   String
    prompt   String
    public   Boolean @default(true)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    likes CommunityPostLike[]
}

model CommunityPostLike {
    id     Int    @id @default(autoincrement())
    postId String
    userId String

    post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
    user User          @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
}
